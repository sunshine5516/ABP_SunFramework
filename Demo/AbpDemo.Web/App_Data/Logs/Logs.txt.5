WARN  2019-05-28 01:31:46,127 [99   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
DEBUG 2019-05-28 01:32:19,601 [nager] Hangfire.SqlServer.ExpirationManager     - Removing outdated records from the 'AggregatedCounter' table...
WARN  2019-05-28 01:32:27,921 [100  ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:32:34,610 [chdog] Hangfire.Server.ServerWatchdog           - Error occurred during execution of 'ServerWatchdog' process. Execution will be retried (attempt #17) in 00:04:47 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(TimeSpan timeOut)
   在 Hangfire.Server.ServerWatchdog.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:32:34,610 [nager] Hangfire.SqlServer.ExpirationManager     - Error occurred during execution of 'Hangfire.SqlServer.ExpirationManager' process. Execution will be retried (attempt #17) in 00:04:40 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(SqlServerStorage storage, Action`1 action)
   在 Hangfire.SqlServer.ExpirationManager.Execute(CancellationToken cancellationToken)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:32:48,283 [0f115] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0aa0f115' process. Execution will be retried (attempt #18) in 00:04:50 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:32:48,314 [99   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:32:49,598 [6eece] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0716eece' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:33:08,602 [tbeat] Hangfire.Server.ServerHeartbeat          - Error occurred during execution of 'ServerHeartbeat' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.SqlServerConnection.Heartbeat(String serverId)
   在 Hangfire.Server.ServerHeartbeat.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:33:11,259 [3083b] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #d183083b' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:33:19,601 [be998] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #eeebe998' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:33:20,340 [a9f02] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #8e1a9f02' process. Execution will be retried (attempt #18) in 00:04:52 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
DEBUG 2019-05-28 01:33:26,171 [gator] Hangfire.SqlServer.CountersAggregator    - Aggregating records in 'Counter' table...
WARN  2019-05-28 01:33:30,101 [118  ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:33:41,180 [duler] Hangfire.Server.DelayedJobScheduler      - Error occurred during execution of 'DelayedJobScheduler' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerConnection.AcquireLock(String resource, TimeSpan timeout)
   在 Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(String resource, TimeSpan timeout)
   在 Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock[T](JobStorage storage, Func`2 action)
   在 Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(BackgroundProcessContext context)
   在 Hangfire.Server.DelayedJobScheduler.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:33:41,181 [e5bee] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #838e5bee' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:33:41,181 [gator] Hangfire.SqlServer.CountersAggregator    - Error occurred during execution of 'Hangfire.SqlServer.CountersAggregator' process. Execution will be retried (attempt #17) in 00:04:48 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.CountersAggregator.Execute(CancellationToken cancellationToken)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:33:41,180 [b2f87] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #918b2f87' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:33:41,206 [47e9d] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #1bc47e9d' process. Execution will be retried (attempt #18) in 00:04:56 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:33:41,222 [118  ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:33:45,798 [72efa] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #db772efa' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:34:11,362 [5fc62] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #7ad5fc62' process. Execution will be retried (attempt #18) in 00:04:55 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:34:12,362 [01133] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #82b01133' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:34:14,050 [47230] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #99347230' process. Execution will be retried (attempt #18) in 00:04:56 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:34:15,488 [duler] Hangfire.Server.RecurringJobScheduler    - Error occurred during execution of 'RecurringJobScheduler' process. Execution will be retried (attempt #16) in 00:04:16 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerConnection.AcquireLock(String resource, TimeSpan timeout)
   在 Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(String resource, TimeSpan timeout)
   在 Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(JobStorage storage, Action`1 action)
   在 Hangfire.Server.RecurringJobScheduler.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:34:18,055 [cf3e6] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #2bccf3e6' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:34:18,056 [ae8ec] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #ef8ae8ec' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:34:18,771 [2651c] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #2842651c' process. Execution will be retried (attempt #18) in 00:04:56 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:34:18,779 [dafc6] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #7f4dafc6' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:34:19,635 [f4211] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #83cf4211' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:34:20,058 [30319] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0ca30319' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:34:32,339 [9dd59] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #5a39dd59' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:34:32,405 [98   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:34:46,783 [c7304] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #c16c7304' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:34:46,815 [98   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:35:36,312 [98   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:35:56,692 [98   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:36:38,481 [99   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:36:58,879 [101  ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
DEBUG 2019-05-28 01:37:14,618 [nager] Hangfire.SqlServer.ExpirationManager     - Removing outdated records from the 'AggregatedCounter' table...
WARN  2019-05-28 01:37:40,726 [101  ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:37:44,506 [nager] Hangfire.SqlServer.ExpirationManager     - Error occurred during execution of 'Hangfire.SqlServer.ExpirationManager' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(SqlServerStorage storage, Action`1 action)
   在 Hangfire.SqlServer.ExpirationManager.Execute(CancellationToken cancellationToken)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:37:44,506 [chdog] Hangfire.Server.ServerWatchdog           - Error occurred during execution of 'ServerWatchdog' process. Execution will be retried (attempt #18) in 00:04:50 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(TimeSpan timeOut)
   在 Hangfire.Server.ServerWatchdog.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:37:44,506 [0f115] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0aa0f115' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:37:45,790 [90   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:38:04,940 [6eece] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0716eece' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:38:04,993 [56   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
DEBUG 2019-05-28 01:38:29,190 [gator] Hangfire.SqlServer.CountersAggregator    - Aggregating records in 'Counter' table...
ERROR 2019-05-28 01:38:41,269 [3083b] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #d183083b' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:38:42,351 [a9f02] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #8e1a9f02' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:38:44,193 [gator] Hangfire.SqlServer.CountersAggregator    - Error occurred during execution of 'Hangfire.SqlServer.CountersAggregator' process. Execution will be retried (attempt #18) in 00:04:59 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.CountersAggregator.Execute(CancellationToken cancellationToken)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:38:45,353 [duler] Hangfire.Server.DelayedJobScheduler      - Error occurred during execution of 'DelayedJobScheduler' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerConnection.AcquireLock(String resource, TimeSpan timeout)
   在 Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(String resource, TimeSpan timeout)
   在 Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock[T](JobStorage storage, Func`2 action)
   在 Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(BackgroundProcessContext context)
   在 Hangfire.Server.DelayedJobScheduler.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:38:45,353 [b2f87] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #918b2f87' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:38:45,354 [e5bee] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #838e5bee' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:38:45,354 [be998] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #eeebe998' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:38:45,354 [tbeat] Hangfire.Server.ServerHeartbeat          - Error occurred during execution of 'ServerHeartbeat' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.SqlServerConnection.Heartbeat(String serverId)
   在 Hangfire.Server.ServerHeartbeat.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:38:45,354 [47e9d] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #1bc47e9d' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:38:45,383 [83   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:38:45,800 [72efa] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #db772efa' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:39:05,769 [17   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:39:21,381 [5fc62] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #7ad5fc62' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
WARN  2019-05-28 01:39:40,839 [64   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:39:42,383 [01133] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #82b01133' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:39:44,792 [2651c] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #2842651c' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:39:46,879 [dafc6] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #7f4dafc6' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:39:46,880 [47230] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #99347230' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:39:46,881 [ae8ec] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #ef8ae8ec' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:39:46,882 [cf3e6] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #2bccf3e6' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:39:46,881 [f4211] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #83cf4211' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:39:46,882 [duler] Hangfire.Server.RecurringJobScheduler    - Error occurred during execution of 'RecurringJobScheduler' process. Execution will be retried (attempt #17) in 00:04:24 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerConnection.AcquireLock(String resource, TimeSpan timeout)
   在 Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(String resource, TimeSpan timeout)
   在 Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(JobStorage storage, Action`1 action)
   在 Hangfire.Server.RecurringJobScheduler.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:39:46,880 [9dd59] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #5a39dd59' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:39:46,882 [30319] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0ca30319' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:39:46,883 [c7304] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #c16c7304' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:39:46,931 [101  ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:40:07,310 [83   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:40:49,131 [91   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:41:09,578 [17   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:41:51,372 [17   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:42:11,811 [101  ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
DEBUG 2019-05-28 01:42:44,515 [nager] Hangfire.SqlServer.ExpirationManager     - Removing outdated records from the 'AggregatedCounter' table...
ERROR 2019-05-28 01:42:53,564 [nager] Hangfire.SqlServer.ExpirationManager     - Error occurred during execution of 'Hangfire.SqlServer.ExpirationManager' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(SqlServerStorage storage, Action`1 action)
   在 Hangfire.SqlServer.ExpirationManager.Execute(CancellationToken cancellationToken)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:42:53,564 [chdog] Hangfire.Server.ServerWatchdog           - Error occurred during execution of 'ServerWatchdog' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(TimeSpan timeOut)
   在 Hangfire.Server.ServerWatchdog.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:42:53,564 [0f115] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0aa0f115' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:42:53,596 [64   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:43:13,953 [6eece] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0716eece' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:43:14,012 [91   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
DEBUG 2019-05-28 01:43:43,199 [gator] Hangfire.SqlServer.CountersAggregator    - Aggregating records in 'Counter' table...
WARN  2019-05-28 01:43:55,843 [64   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:43:56,277 [47e9d] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #1bc47e9d' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:43:56,277 [gator] Hangfire.SqlServer.CountersAggregator    - Error occurred during execution of 'Hangfire.SqlServer.CountersAggregator' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.CountersAggregator.Execute(CancellationToken cancellationToken)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:43:56,277 [e5bee] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #838e5bee' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:43:56,278 [b2f87] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #918b2f87' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:43:56,278 [72efa] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #db772efa' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:43:56,277 [duler] Hangfire.Server.DelayedJobScheduler      - Error occurred during execution of 'DelayedJobScheduler' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerConnection.AcquireLock(String resource, TimeSpan timeout)
   在 Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(String resource, TimeSpan timeout)
   在 Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock[T](JobStorage storage, Func`2 action)
   在 Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(BackgroundProcessContext context)
   在 Hangfire.Server.DelayedJobScheduler.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:43:56,279 [3083b] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #d183083b' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:43:56,279 [tbeat] Hangfire.Server.ServerHeartbeat          - Error occurred during execution of 'ServerHeartbeat' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.SqlServerConnection.Heartbeat(String serverId)
   在 Hangfire.Server.ServerHeartbeat.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:43:56,277 [be998] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #eeebe998' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:43:56,279 [a9f02] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #8e1a9f02' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:44:16,225 [64   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:44:57,988 [47230] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #99347230' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:44:57,988 [c7304] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #c16c7304' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:44:57,990 [dafc6] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #7f4dafc6' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:44:57,991 [ae8ec] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #ef8ae8ec' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:44:57,991 [9dd59] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #5a39dd59' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:44:57,992 [cf3e6] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #2bccf3e6' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:44:57,990 [2651c] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #2842651c' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:44:57,988 [f4211] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #83cf4211' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:44:57,992 [30319] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0ca30319' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:44:57,991 [5fc62] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #7ad5fc62' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:44:58,036 [64   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:45:12,727 [duler] Hangfire.Server.RecurringJobScheduler    - Error occurred during execution of 'RecurringJobScheduler' process. Execution will be retried (attempt #18) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerConnection.AcquireLock(String resource, TimeSpan timeout)
   在 Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(String resource, TimeSpan timeout)
   在 Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(JobStorage storage, Action`1 action)
   在 Hangfire.Server.RecurringJobScheduler.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:45:12,727 [01133] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #82b01133' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:45:12,768 [91   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:46:02,254 [91   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:46:22,637 [62   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:47:04,443 [61   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:47:24,820 [62   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
DEBUG 2019-05-28 01:47:53,565 [nager] Hangfire.SqlServer.ExpirationManager     - Removing outdated records from the 'AggregatedCounter' table...
WARN  2019-05-28 01:48:06,605 [59   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:48:08,567 [0f115] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0aa0f115' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:48:08,567 [chdog] Hangfire.Server.ServerWatchdog           - Error occurred during execution of 'ServerWatchdog' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(TimeSpan timeOut)
   在 Hangfire.Server.ServerWatchdog.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:48:08,567 [nager] Hangfire.SqlServer.ExpirationManager     - Error occurred during execution of 'Hangfire.SqlServer.ExpirationManager' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(SqlServerStorage storage, Action`1 action)
   在 Hangfire.SqlServer.ExpirationManager.Execute(CancellationToken cancellationToken)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:48:11,640 [59   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:48:29,292 [6eece] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0716eece' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:48:29,322 [68   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
DEBUG 2019-05-28 01:48:56,279 [gator] Hangfire.SqlServer.CountersAggregator    - Aggregating records in 'Counter' table...
WARN  2019-05-28 01:49:11,123 [59   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:49:11,280 [b2f87] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #918b2f87' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:49:11,280 [e5bee] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #838e5bee' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:49:11,281 [gator] Hangfire.SqlServer.CountersAggregator    - Error occurred during execution of 'Hangfire.SqlServer.CountersAggregator' process. Execution will be retried (attempt #20) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.CountersAggregator.Execute(CancellationToken cancellationToken)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:49:11,281 [duler] Hangfire.Server.DelayedJobScheduler      - Error occurred during execution of 'DelayedJobScheduler' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerConnection.AcquireLock(String resource, TimeSpan timeout)
   在 Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(String resource, TimeSpan timeout)
   在 Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock[T](JobStorage storage, Func`2 action)
   在 Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(BackgroundProcessContext context)
   在 Hangfire.Server.DelayedJobScheduler.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:49:11,281 [72efa] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #db772efa' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:49:11,282 [a9f02] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #8e1a9f02' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:49:11,283 [tbeat] Hangfire.Server.ServerHeartbeat          - Error occurred during execution of 'ServerHeartbeat' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection[T](DbConnection dedicatedConnection, Func`2 func)
   在 Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection dedicatedConnection, Action`1 action)
   在 Hangfire.SqlServer.SqlServerConnection.Heartbeat(String serverId)
   在 Hangfire.Server.ServerHeartbeat.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:49:11,283 [be998] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #eeebe998' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:49:11,282 [3083b] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #d183083b' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:49:11,284 [47e9d] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #1bc47e9d' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:49:16,184 [65   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:49:36,565 [65   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:50:12,993 [dafc6] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #7f4dafc6' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:50:12,994 [9dd59] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #5a39dd59' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:50:12,993 [c7304] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #c16c7304' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:50:12,995 [ae8ec] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #ef8ae8ec' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:50:12,995 [cf3e6] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #2bccf3e6' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:50:12,999 [f4211] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #83cf4211' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:50:13,000 [2651c] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #2842651c' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:50:13,001 [30319] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #0ca30319' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:50:13,024 [5fc62] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #7ad5fc62' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.InvalidOperationException: 超时时间已到。超时时间已到，但是尚未从池中获取连接。出现这种情况可能是因为所有池连接均在使用，并且达到了最大池大小。
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ERROR 2019-05-28 01:50:14,482 [47230] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #99347230' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
ERROR 2019-05-28 01:50:14,482 [01133] Hangfire.Server.Worker                   - Error occurred during execution of 'Worker #82b01133' process. Execution will be retried (attempt #21) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerJobQueue.DequeueUsingTransaction(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerJobQueue.Dequeue(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.SqlServer.SqlServerConnection.FetchNextJob(String[] queues, CancellationToken cancellationToken)
   在 Hangfire.Server.Worker.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:50:14,555 [68   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:50:34,947 [58   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
ERROR 2019-05-28 01:51:16,709 [duler] Hangfire.Server.RecurringJobScheduler    - Error occurred during execution of 'RecurringJobScheduler' process. Execution will be retried (attempt #19) in 00:05:00 seconds.
System.Data.SqlClient.SqlException (0x80131904): 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception (0x80004005): 找不到网络路径。
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()
   在 Hangfire.SqlServer.SqlServerConnection.AcquireLock(String resource, TimeSpan timeout)
   在 Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(String resource, TimeSpan timeout)
   在 Hangfire.Server.RecurringJobScheduler.UseConnectionDistributedLock(JobStorage storage, Action`1 action)
   在 Hangfire.Server.RecurringJobScheduler.Execute(BackgroundProcessContext context)
   在 Hangfire.Server.ServerProcessExtensions.Execute(IServerProcess process, BackgroundProcessContext context)
   在 Hangfire.Server.AutomaticRetryProcess.Execute(BackgroundProcessContext context)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:53,State:0,Class:20
WARN  2019-05-28 01:51:16,761 [59   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:51:37,177 [68   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:52:18,994 [59   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
WARN  2019-05-28 01:52:39,398 [65   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
DEBUG 2019-05-28 01:53:08,570 [nager] Hangfire.SqlServer.ExpirationManager     - Removing outdated records from the 'AggregatedCounter' table...
WARN  2019-05-28 01:53:21,196 [68   ] ion.Users.MakeInactiveUsersPassiveWorker - System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
System.Data.Entity.Core.EntityException: The underlying provider failed on Open. ---> System.Data.SqlClient.SqlException: 在与 SQL Server 建立连接时出现与网络相关的或特定于实例的错误。未找到或无法访问服务器。请验证实例名称是否正确并且 SQL Server 已配置为允许远程连接。 (provider: Named Pipes Provider, error: 40 - 无法打开到 SQL Server 的连接) ---> System.ComponentModel.Win32Exception: 找不到网络路径。
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   在 System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   在 System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   在 System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   在 System.Data.SqlClient.SqlConnection.Open()
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   在 System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.<Open>b__2()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   在 System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Data.Entity.Core.EntityClient.EntityConnection.Open()
   在 System.Data.Entity.DbContextTransaction.EnsureOpenConnection()
   在 System.Data.Entity.DbContextTransaction..ctor(EntityConnection connection, IsolationLevel isolationLevel)
   在 System.Data.Entity.Database.BeginTransaction(IsolationLevel isolationLevel)
   在 Abp.EntityFramework.EntityFramework.Uow.DbContextEfTransactionStrategy.CreateDbContext[TDbContext](String connectionString, IDbContextResolver dbContextResolver) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\DbContextEfTransactionStrategy.cs:行号 41
   在 Abp.EntityFramework.EntityFramework.Uow.EfUnitOfWork.GetOrCreateDbContext[TDbContext](Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\EfUnitOfWork.cs:行号 115
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkExtensions.GetDbContext[TDbContext](IActiveUnitOfWork unitOfWork, Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkExtensions.cs:行号 29
   在 Abp.EntityFramework.EntityFramework.Uow.UnitOfWorkDbContextProvider`1.GetDbContext(Nullable`1 multiTenancySide) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Uow\UnitOfWorkDbContextProvider.cs:行号 28
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Context() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 32
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.get_Table() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 33
   在 Abp.EntityFramework.EntityFramework.Repositories.EfRepositoryBase`3.GetAll() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\Abp.EntityFramework\EntityFramework\Repositories\EfRepositoryBaseOfTEntityAndTPrimaryKey.cs:行号 80
   在 AbpFramework.Domain.Repositories.AbpRepositoryBase`2.GetAllList(Expression`1 predicate) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Repositories\AbpRepositoryBase.cs:行号 58
   在 Castle.Proxies.Invocations.IRepository`2_GetAllList_1.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.IRepository`2Proxy.GetAllList(Expression`1 predicate)
   在 AbpDemo.Core.Authorization.Users.MakeInactiveUsersPassiveWorker.DoWork() 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\Demo\AbpDemo.Core\Authorization\Users\MakeInactiveUsersPassiveWorker.cs:行号 32
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork_callback()
   在 Castle.Proxies.Invocations.MakeInactiveUsersPassiveWorker_DoWork.InvokeMethodOnTarget()
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformSyncUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 65
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.PerformUow(IInvocation invocation, UnitOfWorkOptions options) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 56
   在 AbpFramework.Domain.Uow.UnitOfWorkInterceptor.Intercept(IInvocation invocation) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Domain\Uow\UnitOfWorkInterceptor.cs:行号 45
   在 Castle.DynamicProxy.AbstractInvocation.Proceed()
   在 Castle.Proxies.MakeInactiveUsersPassiveWorkerProxy.DoWork()
   在 AbpFramework.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(Object sender, EventArgs e) 位置 F:\Demo\开源框架\ABP\ABP_SunFramework\src\AbpFramework\Threading\BackgroundWorkers\PeriodicBackgroundWorkerBase.cs:行号 42
